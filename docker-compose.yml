version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - MODEL_PATH=/app/outputs/models/bertweet_enhanced
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crisis_alert
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development API Service
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8001:8000"
    environment:
      - MODEL_PATH=/app/outputs/models/bertweet_enhanced
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crisis_alert_dev
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - .:/app
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    profiles:
      - dev

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=crisis_alert
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["celery", "-A", "src.workers.celery_app", "worker", "--loglevel=info"]
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crisis_alert
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    profiles:
      - production

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["celery", "-A", "src.workers.celery_app", "beat", "--loglevel=info"]
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crisis_alert
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    profiles:
      - production

  # Flower (Celery monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["celery", "-A", "src.workers.celery_app", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - production

  # Nginx (reverse proxy for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: crisis_alert_network 