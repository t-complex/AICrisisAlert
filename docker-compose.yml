version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aicrisisalert-api
    ports:
      - "8000:8000"
    # Security: Add resource limits and security options
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true if app doesn't need write access to filesystem
    tmpfs:
      - /tmp
    environment:
      - MODEL_PATH=/app/outputs/models
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - USE_SIMPLE_API=${USE_SIMPLE_API:-false}
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/aicrisisalert
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      networks:
        - aicrisisalert-network
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development API Service
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8001:8000"
    environment:
      - MODEL_PATH=/app/outputs/models/bertweet_enhanced
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/crisis_alert_dev
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
      - .:/app
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    profiles:
      - dev

    db:
      image: postgres:14-alpine
      container_name: aicrisisalert-db
      environment:
        - POSTGRES_USER=${POSTGRES_USER:-postgres}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB:-aicrisisalert}
      volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      ports:
        - "5432:5432"
      networks:
        - aicrisisalert-network
      # Security: Add resource limits and security options
      deploy:
        resources:
          limits:
            memory: 1G
            cpus: '0.5'
          reservations:
            memory: 512M
            cpus: '0.25'
      security_opt:
        - no-new-privileges:true
      tmpfs:
        - /tmp
        - /var/run/postgresql
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        timeout: 5s
        retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-crisis_alert}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aicrisisalert-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aicrisisalert-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aicrisisalert-celery-worker
    command: ["celery", "-A", "src.workers.celery_app", "worker", "--loglevel=info"]
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/aicrisisalert
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - db
      - redis
    networks:
      - aicrisisalert-network

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aicrisisalert-celery-beat
    command: ["celery", "-A", "src.workers.celery_app", "beat", "--loglevel=info"]
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/aicrisisalert
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
    volumes:
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    profiles:
      - production
    networks:
      - aicrisisalert-network

  # Flower (Celery monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: ["celery", "-A", "src.workers.celery_app", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - production

  nginx:
    image: nginx:alpine
    container_name: aicrisisalert-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - aicrisisalert-network

volumes:
  postgres_data:
  redis_data:

networks:
  aicrisisalert-network:
    driver: bridge 